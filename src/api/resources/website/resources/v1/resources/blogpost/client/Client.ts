/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../../../core";
import * as FernWebsite from "../../../../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../../../../../serialization";
import * as errors from "../../../../../../../../errors";

export declare namespace Blogpost {
    interface Options {
        environment: core.Supplier<string>;
        username?: core.Supplier<string | undefined>;
        password?: core.Supplier<string | undefined>;
    }
}

export class Blogpost {
    constructor(protected readonly options: Blogpost.Options) {}

    /**
     * Retrieve all blogposts from the content store
     * @throws {@link FernWebsite.NotFoundError}
     * @throws {@link FernWebsite.BadRequestError}
     */
    public async getBlogposts(): Promise<FernWebsite.fixtures.BlogPostCollection> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this.options.environment), "/blog"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@exa-online/fern-website-node-sdk",
                "X-Fern-SDK-Version": "1.0.1",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.fixtures.BlogPostCollection.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new FernWebsite.NotFoundError();
                case 400:
                    throw new FernWebsite.BadRequestError();
                default:
                    throw new errors.FernWebsiteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernWebsiteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernWebsiteTimeoutError();
            case "unknown":
                throw new errors.FernWebsiteError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve a blog post from the content store based on its slug
     * @throws {@link FernWebsite.website.v1.BlogPostDoesNotExistError}
     * @throws {@link FernWebsite.NotFoundError}
     * @throws {@link FernWebsite.BadRequestError}
     */
    public async getBlogPost(slug: FernWebsite.fixtures.BlogPostSlug): Promise<FernWebsite.fixtures.BlogPost> {
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this.options.environment),
                `/blog/${await serializers.fixtures.BlogPostSlug.jsonOrThrow(slug)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@exa-online/fern-website-node-sdk",
                "X-Fern-SDK-Version": "1.0.1",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.fixtures.BlogPost.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new FernWebsite.website.v1.BlogPostDoesNotExistError(
                        await serializers.fixtures.BlogPostSlug.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new FernWebsite.NotFoundError();
                case 400:
                    throw new FernWebsite.BadRequestError();
                default:
                    throw new errors.FernWebsiteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernWebsiteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernWebsiteTimeoutError();
            case "unknown":
                throw new errors.FernWebsiteError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Add a new blogpost to the content store
     * @throws {@link FernWebsite.NotFoundError}
     * @throws {@link FernWebsite.BadRequestError}
     */
    public async createBlogPost(
        request: FernWebsite.fixtures.CreateBlogPostRequest
    ): Promise<FernWebsite.fixtures.BlogPostSlug> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this.options.environment), "/blog"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@exa-online/fern-website-node-sdk",
                "X-Fern-SDK-Version": "1.0.1",
            },
            contentType: "application/json",
            body: await serializers.fixtures.CreateBlogPostRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.fixtures.BlogPostSlug.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new FernWebsite.NotFoundError();
                case 400:
                    throw new FernWebsite.BadRequestError();
                default:
                    throw new errors.FernWebsiteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernWebsiteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernWebsiteTimeoutError();
            case "unknown":
                throw new errors.FernWebsiteError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        const username = await core.Supplier.get(this.options.username);
        const password = await core.Supplier.get(this.options.password);
        if (username != null && password != null) {
            return core.BasicAuth.toAuthorizationHeader({
                username: username,
                password: password,
            });
        }

        return undefined;
    }
}
